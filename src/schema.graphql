# On current DB
# 1. match (n:ReactionLikeEvent) set n :Reaction
# 2. WORKS --> match (n:EntityWithAccessionedSequence) set n :Protein
# 3. match (n:Reaction) set n :PhysicalEntity

# Add these commands:
# ----- Useful
# 1. match (n:EntityWithAccessionedSequence) set n :Protein

# ----- Not-Useful
# 2. match (n:ReactionLikeEvent) set n :Reaction
# 3. match (n:Reaction) set n :ReactionLikeEvent
# 4. match (n:Reaction) set n :PhysicalEntity

# Reactome TypeDefs

# ------------ Interface List
interface Event {
  id: ID
  dbId: Int
  schemaClass: String
  oldStId: String
  isInDisease: Boolean
  releaseDate: String
  displayName: String
  stId: String
  speciesName: String
  diagramHeight: Int
  hasEHLD: Boolean
  stIdVersion: String
  releaseStatus: String
  name: [String]
  definition: String
  hasDiagram: Boolean
  isInferred: Boolean
  doi: String
  diagramWidth: Int
  isChimeric: Boolean
  systematicName: String
}

interface PhysicalEntity {
  id: ID
  dbId: Int
  definition: String
  displayName: String
  endCoordinate: Int
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
}

interface ReferenceEntity {
  id: ID
  dbId: Int
  abbreviation: String
  approvalSource: [String]
  approved: Boolean
  chain: [String]
  checksum: String
  comment: [String]
  databaseName: String
  description: [String]
  displayName: String
  formula: String
  geneName: [String]
  inn: String
  identifier: String
  isSequenceChanged: Boolean
  keyword: [String]
  name: [String]
  otherIdentifier: [String]
  schemaClass: String
  secondaryIdentifier: [String]
  sequenceLength: Int
  trivial: Boolean
  type: String
  url: String
  variantIdentifier: String
}

# ----- Types By "Event" Interface -----
# (Type List: Pathway, Reaction)

type Pathway implements Event {
  id: ID
  dbId: Int
  schemaClass: String
  oldStId: String
  isInDisease: Boolean
  releaseDate: String
  displayName: String
  stId: String
  speciesName: String
  diagramHeight: Int
  hasEHLD: Boolean
  stIdVersion: String
  releaseStatus: String
  name: [String]
  definition: String
  hasDiagram: Boolean
  isInferred: Boolean
  doi: String
  diagramWidth: Int
  isChimeric: Boolean
  systematicName: String
  hasEvent: [Event] @relation(name: "hasEvent", direction: "OUT")
}
# extend type Pathway @additionalLabels(labels: ["newPathwayLabel"])

type Reaction implements Event {
  id: ID
  dbId: Int
  schemaClass: String @neo4j_ignore
  oldStId: String
  isInDisease: Boolean
  releaseDate: String
  displayName: String
  stId: String
  speciesName: String
  diagramHeight: Int
  hasEHLD: Boolean
  stIdVersion: String
  releaseStatus: String
  name: [String]
  definition: String
  hasDiagram: Boolean
  isInferred: Boolean
  doi: String
  diagramWidth: Int
  isChimeric: Boolean
  systematicName: String
  templateEvent: [Event] @relation(name: "templateEvent", direction: "OUT")
  reverseReaction: [Reaction]
    @relation(name: "reverseReaction", direction: "BOTH")
  input: [PhysicalEntity] @relation(name: "input", direction: "OUT")
  #@neo4j_ignore
  #@cypher(statement: "MATCH (this)-[:input]->(p:PhysicalEntity) RETURN p") # @relation(name: "input", direction: "OUT")
  output: [PhysicalEntity] @relation(name: "output", direction: "OUT")
}
#@neo4j_ignore

# ----- Types By "PhysicalEntity" Interface -----
# (Type List: Complex, Drug, Set, GenomeEncodedEntity, EntityWithAccessionedSequence, OtherEntity, Polymer, SimpleEntity, Protein)

type Complex implements PhysicalEntity {
  id: ID
  dbId: Int
  definition: String
  displayName: String
  endCoordinate: Int
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
}

type Drug implements PhysicalEntity {
  id: ID
  dbId: Int
  definition: String
  displayName: String
  endCoordinate: Int
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
}

type Set implements PhysicalEntity {
  id: ID
  dbId: Int
  definition: String
  displayName: String
  endCoordinate: Int
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
  members: [PhysicalEntity] @relation(name: "hasMember", direction: "OUT")
  candidates: [PhysicalEntity] @relation(name: "hasCandidate", direction: "OUT")
}

type GenomeEncodedEntity implements PhysicalEntity {
  id: ID
  dbId: Int
  definition: String
  displayName: String
  endCoordinate: Int
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
}

type EntityWithAccessionedSequence implements PhysicalEntity {
  id: ID
  dbId: Int
  definition: String
  displayName: String
  endCoordinate: Int
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
}

type OtherEntity implements PhysicalEntity {
  id: ID
  dbId: Int
  definition: String
  displayName: String
  endCoordinate: Int
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
}

type Polymer implements PhysicalEntity {
  id: ID
  dbId: Int
  definition: String
  displayName: String
  endCoordinate: Int
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
}

type SimpleEntity implements PhysicalEntity {
  id: ID
  dbId: Int
  definition: String
  displayName: String
  endCoordinate: Int
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
}

type Protein implements PhysicalEntity {
  id: ID
  dbId: Int
  abbreviation: String
  approvalSource: [String]
  approved: Boolean
  chain: [String]
  checksum: String
  comment: [String]
  databaseName: String
  description: [String]
  definition: String
  displayName: String
  formula: String
  geneName: [String]
  inn: String
  identifier: String
  isSequenceChanged: Boolean
  keyword: [String]
  endCoordinate: Int
  isChimeric: Boolean
  isInDisease: Boolean
  isOrdered: Boolean
  maxUnitCount: Int
  minUnitCount: Int
  name: [String]
  otherIdentifier: [String]
  oldStId: String
  referenceType: String
  schemaClass: String
  secondaryIdentifier: [String]
  sequenceLength: Int
  trivial: Boolean
  type: String
  url: String
  variantIdentifier: String
  speciesName: String
  startCoordinate: Int
  stId: String
  stIdVersion: String
  stoichiometryKnown: Boolean
  systematicName: String
  referenceEntity: [ReferenceGeneProduct]
    @relation(name: "referenceEntity", direction: "OUT")
}

# ----- Types By "ReferenceEntity" Interface -----
# (Type List: ReferenceGeneProduct, ReferenceMolecule)

type ReferenceGeneProduct implements ReferenceEntity {
  id: ID
  dbId: Int
  abbreviation: String
  approvalSource: [String]
  approved: Boolean
  chain: [String]
  checksum: String
  comment: [String]
  databaseName: String
  description: [String]
  displayName: String
  formula: String
  geneName: [String]
  inn: String
  identifier: String
  isSequenceChanged: Boolean
  keyword: [String]
  name: [String]
  otherIdentifier: [String]
  schemaClass: String
  secondaryIdentifier: [String]
  sequenceLength: Int
  trivial: Boolean
  type: String
  url: String
  variantIdentifier: String
  referenceDatabase: [ReferenceDatabase]
    @relation(name: "referenceDatabase", direction: "OUT")
}

type ReferenceMolecule implements ReferenceEntity {
  id: ID
  dbId: Int
  abbreviation: String
  approvalSource: [String]
  approved: Boolean
  chain: [String]
  checksum: String
  comment: [String]
  databaseName: String
  description: [String]
  displayName: String
  formula: String
  geneName: [String]
  inn: String
  identifier: String
  isSequenceChanged: Boolean
  keyword: [String]
  name: [String]
  otherIdentifier: [String]
  schemaClass: String
  secondaryIdentifier: [String]
  sequenceLength: Int
  trivial: Boolean
  type: String
  url: String
  variantIdentifier: String
}

# ----- Just Types -----

type ReferenceDatabase {
  id: ID
  dbId: Int
  accessUrl: String
  displayName: String
  name: [String]
  schemaClass: String
}
